diff --git a/Trilateral/src/Application/Include/Mesh_imgui.h b/Trilateral/src/Application/Include/Mesh_imgui.h
index fcb3953..38347fe 100644
--- a/Trilateral/src/Application/Include/Mesh_imgui.h
+++ b/Trilateral/src/Application/Include/Mesh_imgui.h
@@ -198,6 +198,12 @@ void imgui_mesh_window(int& selected_mesh, MeshFactory& m_factory )
         m_factory.remove_all();
         m_factory.add_all();
     }
+    if (ImGui::Button("Reset Points"))
+    {
+        reset_points(m_factory, selected_mesh);
+        m_factory.remove_all();
+        m_factory.add_all();
+    }
     ImGui::End();
 }
 
diff --git a/Trilateral/src/Application/Include/TrilateralMap.h b/Trilateral/src/Application/Include/TrilateralMap.h
index 105802a..c4d388c 100644
--- a/Trilateral/src/Application/Include/TrilateralMap.h
+++ b/Trilateral/src/Application/Include/TrilateralMap.h
@@ -547,6 +547,7 @@ static std::vector<unsigned int> AverageGeodesicFunction(MeshFactory& mesh_fac,
 		// 2 - calculate distances for all
 		std::vector<float> geodesic_distances = compute_geodesic_distances_fibonacci_heap_distances(*m, i);
 		// sum 
+		agdValues[i] = 0;
 		for (size_t j = 0; j < geodesic_distances.size(); j++)
 		{
 			agdValues[i] += geodesic_distances[j];
@@ -666,6 +667,37 @@ static std::vector<unsigned int> AverageGeodesicFunction(MeshFactory& mesh_fac,
 
 	return agd_indices;
 }
+static void minimum_geodesic_using_agd(MeshFactory &mesh_fac , int mesh_index , int point_size , std::vector<unsigned int> &agdVec)
+{
+	Mesh* m = &mesh_fac.mesh_vec[mesh_index];
+	std::vector<unsigned int> mgd_vec( point_size, 0 ); 
+	for (int i = 0; i < m->vertices.size(); i++)
+	{
+		bool is_agd = false;
+		for (size_t j = 0; j < agdVec.size(); j++)
+		{
+			if (agdVec[j] == i)
+			{
+				is_agd = true;
+				break;
+			}
+		}
+		if (is_agd)
+		{
+			continue;
+		}
+
+		std::vector<float> geodesic_distances = compute_geodesic_distances_fibonacci_heap_distances(*m, i);
+		// get minimum geodesic distance for each point
+		int minIndex = -1;
+		float minValue = 999999;
+		for (size_t j = 0; j < agdVec.size(); j++)
+		{
+				
+		}
+	}
+}
+
 
 struct TrilateralDescriptor
 {
@@ -1833,4 +1865,16 @@ void match_points_from2_mesh(MeshFactory& mesh_fac, int mesh_index1, int mesh_in
 //	Eigen::Matrix<double, 4, 1 > p2; 
 //	Eigen::Matrix<double, 4, 1 > p3;
 //
-//}
\ No newline at end of file
+//}
+
+static void reset_points(MeshFactory &mesh_fac , int meshIndex )
+{
+	Mesh* m = &mesh_fac.mesh_vec[meshIndex];
+	
+	for (size_t i = 0; i < m->colors.size(); i++)
+	{
+		m->colors[i].r = 0;
+		m->colors[i].g = 0;
+		m->colors[i].b = 0;
+	}
+}
\ No newline at end of file
