#!/bin/bash

visualize="true"	# renders maps as images to jpeg files

############# You should not modify anything below this line ###########

	# read file names as arguments - or use default
if [ $# -ge 8 ]; then
	mesh=$1
	inputMap=$2
	workDir=$3
	algName=$4
	camera=$5
	lineID=$6
	symmetryVts=$7
	symmetryCorrs=$8
else
	echo =============================
	echo ============ USAGE: =========
	echo "    ./TestErroAllVertices mesh1.off mymap.cor/map outDir algName "
	echo "							   [camera.txt lineID] truth.vts/pid truth.sym.info"
	echo
	echo ============ PARAMS: =========
	echo "     mesh.off - input mesh to detect symmetries"
	echo "     mymap.map/cor - predicted dense/coarse correspondence file, GMDS is used to extrapolate mymap.cor"
	echo "          if mymap.map is provided, algorithm checks if mymap.cor exists to render coarse corrs. "
	echo "     outDir algName - results will be printed to $outDir/BenchResult_$algName_$mesh_to_$mesh.txt"
	echo "     camera.txt lineID - camera file and lineID (both can be set to none)"
	echo "     truth.vts truth.sym.info - set to coarse ground truth files, if you want to "
	echo "                                    test against bilaterally reflected solution as well"
	echo " -----"
	echo " See http://www.cs.princeton.edu/~vk/CorrsCode/Benchmark/doc_bench.html for more details"
	echo =============================	
	exit
fi

if [ ! -d $workDir ]; then
	mkdir $workDir
fi

if [ ! -d $workDir ]; then
	echo Could not find/create work directory: $workDir
	exit
fi


	# separate file name and extension - to create workspace directory
if [ ! -f $mesh ]; then
	echo File $mesh does not exist!
fi;

fileonly=`basename $mesh`
ext="."`echo "$fileonly" | cut -d'.' -f2`
meshname=`echo "$fileonly" | cut -d'.' -f1`
	
	# create workspace directory, copy files
if [ ! -d $workDir/$meshname ]; then
	mkdir $workDir/$meshname
fi

if [ ! -f $workDir/$meshname/$meshname$ext ]; then
	cp $mesh $workDir/$meshname
fi

fileonlyVTS=`basename $symmetryVts`
dironlyVTS=`dirname $symmetryVts`/

fileonlySymmCorrs=`basename $symmetryCorrs`
dironlySymmCorrs=`dirname $symmetryCorrs`/

if [ ! -f $symmetryVts ]; then
	echo [ERROR] Could not find symmetry vts/pid file $symmetryVts
	exit
fi

if [ ! -f $symmetryCorrs ]; then
	echo [ERROR] Could not find symmetry vts/pid file $symmetryCorrs
	exit
fi

if [ "$dironlyVTS" != "$dironlySymmCorrs" ]; then
	echo [ERROR] Files $symmetryVts and $symmetryCorrs must be in the same directory.
	exit
fi


# Loading map
mapFileOnly=`basename $inputMap`
mapExt="."`echo "$mapFileOnly" | cut -d'.' -f2`


	# NOTE: arguments to SurfaceVis below OVERWRITE settings.txt file
	# I included them here for simplicity - so that one would not have to modify settings.txt
	
	# Set input files (copied to their work directories)
params="-ConfSurfaces MeshName [$meshname] MeshExt $ext"
	# Set whether to open visualization
params="$params -Pipeline Visualize $visualize"
	# Set workDir
params="$params -Pipeline WorkFolder $workDir"
	# Set camera
params="$params -ConfSurfaces CameraFile [$camera] CameraLine [$lineID]"
	# Set benchmark files and directories
params="$params -MapConfidence_Truth MapType CoarseMap_FeaturePointsSymmetry "
params="$params -MapConfidence_Truth FileFeaturesMap $fileonlySymmCorrs "
params="$params -MapConfidence_Truth Path [$dironlyVTS]"
params="$params -MapConfidence_Truth FileVertexIDs [$fileonlyVTS]"
params="$params -MapConfidence_Truth AtSamplesRange BenchmarkQuery"

params="$params -ConfSurfaces Samples [BenchmarkQuery]"
params="$params -GeodesicSubsets SetsFrom [BenchmarkQuery]"
params="$params -Pipeline SecondBenchmark none"
params="$params -AlgCorrConfmaps LoadConfidences MapConfidence_Truth"
	# symmetry-specific stuff
params="$params -ConfSurfaces LoadSymmetry Reflection"

	# Algorithm name
params="$params -AlgCorrConfmaps OutputName $algName"
	# Input map file
if [ $mapExt == ".cor" ]; then
	params="$params -Pipeline LoadExternalResult FunkCoarse FinalExternalMap $inputMap -AlgCorrConfmaps ExtrapolationMethod GMDS"
elif [ $mapExt == ".map" ]; then
	params="$params -Pipeline LoadExternalResult FunkMap FinalExternalMap $inputMap -AlgCorrConfmaps ExtrapolationMethod none"
else
	echo "[ERROR] unknown map format: $mapExt (file $inputMap)"
fi

./`uname`_`uname -m`_SurfaceVis ./BenchmarkSettings.txt $params
result=$workDir/BenchResult_"$algName"_"$meshname"_to_"$meshname".txt
echo "Finished benchmark. See the result in:"
echo "     $result"

